require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/teams", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Team. As you add validations to Team, be sure to
  # adjust the attributes here as well.
  let!(:gaming_group) { create(:gaming_group) }
  let!(:team) { create(:team, gaming_group:) }
  let(:member) {
    user = create(:user)
    create(:user_group_membership, user:, gaming_group:)
    user
  }
  let(:valid_attributes) {
    {
      name: Faker::Lorem.word
    }
  }

  let(:invalid_attributes) {
    {
      name: nil
    }
  }

  before do
    sign_in member
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Team" do
        expect {
          post gaming_group_teams_url(gaming_group), params: {team: valid_attributes}
        }.to change(Team, :count).by(1)
      end

      it "redirects to the created team" do
        post gaming_group_teams_url(gaming_group), params: {team: valid_attributes}
        expect(response).to redirect_to(gaming_group_url(gaming_group))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Team" do
        expect {
          post gaming_group_teams_url(gaming_group), params: {team: invalid_attributes}
        }.to change(Team, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post gaming_group_teams_url(gaming_group), params: {team: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "new name"
        }
      }

      it "updates the requested team" do
        patch gaming_group_team_url(gaming_group, team), params: {team: new_attributes}
        team.reload
        expect(team.name).to eq("new name")
      end

      it "redirects to the team" do
        patch gaming_group_team_url(gaming_group, team), params: {team: new_attributes}
        team.reload
        expect(response).to redirect_to(gaming_group_url(gaming_group))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch gaming_group_team_url(gaming_group, team), params: {team: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested team" do
      expect {
        delete gaming_group_team_url(gaming_group, team)
      }.to change(Team, :count).by(-1)
    end

    it "redirects to the teams list" do
      delete gaming_group_team_url(gaming_group, team)
      expect(response).to redirect_to(gaming_group_url(gaming_group))
    end
  end
end
