require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/gaming_sessions", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # GamingSession. As you add validations to GamingSession, be sure to
  # adjust the attributes here as well.
  let(:gaming_group) { create(:gaming_group) }
  let(:valid_attributes) {
    {
      start_time: DateTime.now,
      gaming_group_id: gaming_group.id
    }
  }

  let(:invalid_attributes) {
    {
      start_time: DateTime.now,
      gaming_group_id: nil
    }
  }

  before do
    sign_in create(:user)
  end

  describe "GET /show" do
    it "renders a successful response" do
      gaming_session = GamingSession.create! valid_attributes
      get gaming_session_url(gaming_session)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_gaming_session_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      gaming_session = create(:gaming_session)
      get edit_gaming_session_url(gaming_session)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new GamingSession" do
        expect {
          post gaming_sessions_url, params: {gaming_session: valid_attributes}
        }.to change(GamingSession, :count).by(1)
      end

      it "redirects to the created gaming_session" do
        post gaming_sessions_url, params: {gaming_session: valid_attributes}
        expect(response).to redirect_to(gaming_session_url(GamingSession.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new GamingSession" do
        expect {
          post gaming_sessions_url, params: {gaming_session: invalid_attributes}
        }.to change(GamingSession, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post gaming_sessions_url, params: {gaming_session: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          start_time: 2.days.from_now
        }
      }

      it "updates the requested gaming_session" do
        gaming_session = GamingSession.create! valid_attributes
        patch gaming_session_url(gaming_session), params: {gaming_session: new_attributes}
        gaming_session.reload
        expect(gaming_session.start_time).to be_within(1.second).of(new_attributes[:start_time])
      end

      it "redirects to the gaming_session" do
        gaming_session = GamingSession.create! valid_attributes
        patch gaming_session_url(gaming_session), params: {gaming_session: new_attributes}
        gaming_session.reload
        expect(response).to redirect_to(gaming_session_url(gaming_session))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        gaming_session = GamingSession.create! valid_attributes
        patch gaming_session_url(gaming_session), params: {gaming_session: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested gaming_session" do
      gaming_session = GamingSession.create! valid_attributes
      expect {
        delete gaming_session_url(gaming_session)
      }.to change(GamingSession, :count).by(-1)
    end

    it "redirects to the gaming_sessions list" do
      gaming_session = GamingSession.create! valid_attributes
      delete gaming_session_url(gaming_session)
      expect(response).to redirect_to(gaming_sessions_url)
    end
  end
end
